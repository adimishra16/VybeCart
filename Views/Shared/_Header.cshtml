@{
    ViewBag.Title = "Header";
    var currentController = ViewContext.RouteData.Values["Controller"]?.ToString();
    var currentAction = ViewContext.RouteData.Values["Action"]?.ToString();
    //var userRole = Session["Role"] as string;
}

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>

        .navbar {
            background-color: white !important;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            min-height: 85px; /* Increased from 70px */
            transition: background 0.3s ease-in-out;
            padding: 15px 0; /* Extra padding for better spacing */
        }

        .navbar-brand {
            font-weight: 600;
            font-size: 2.1rem;
            transition: color 0.3s ease-in-out;
        }

            .navbar-brand:hover {
                color: #007bff !important;
            }

        .navbar .nav-link {
            color: black !important;
            font-weight: 500;
            font-size: 1.2rem; /* Increased font size */
            transition: all 0.3s ease-in-out;
            padding: 12px 18px; /* Added more spacing */
            border-radius: 5px;
            display: flex;
            align-items: center; /* Aligns text and icon properly */
            gap: 8px; /* Adds spacing between icon and text */
        }

            .navbar .nav-link.active {
                color: #007bff !important;
                font-weight: 600;
            }

            .navbar .nav-link:hover {
                background-color: rgba(0, 123, 255, 0.1);
                color: #007bff !important;
                transform: translateY(-2px);
            }

            .navbar .nav-link i {
                font-size: 1.5rem !important; /* Uniform icon size */
            }

                .navbar .nav-link i.bi-cart,
                .navbar .nav-link i.bi-heart {
                    font-size: 1.5rem !important; /* Larger size for the cart icon */
                }

        /* Profile Dropdown */
        .navbar .dropdown-menu {
            min-width: 180px;
            border-radius: 8px;
            box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.15);
        }

        .navbar .dropdown-item {
            max-height: 200px;
            font-size: 0.90rem;
            padding: 5px 12px;
            transition: background 0.3s ease-in-out;
            overflow-y: auto;
        }

            .navbar .dropdown-item:hover {
                background-color: #007bff !important;
                color: white !important;
                border-radius: 5px;
            }

            .navbar .dropdown-item.text-danger:hover {
                background-color: #dc3545 !important;
            }

            .navbar .dropdown-item i {
                font-size: 1.2rem;
            }

        .cart-count {
            font-size: 0.9rem;
            padding: 3px 6px;
            position: relative;
            top: -8px;
            left: -5px;
        }

        .scrollable-menu {
            max-height: 350px;
            overflow-y: auto;
        }
    </style>
</head>

<nav class="navbar navbar-expand-lg navbar-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="@Url.Action("Index", "Home")">
            <i class="bi bi-shop"></i> MyShop
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                @if (Session["Role"] != null && Session["Role"].ToString() == "Seller")
                {
                    <li class="nav-item">
                        <a class="nav-link @(currentController == "Home" && currentAction == "Index" ? "active" : "")"
                           href="@Url.Action("Dashboard","Seller")">
                            <i class="bi bi-shop-window"></i> Seller Dashboard
                        </a>
                    </li>
                }
                @if (Session["Role"] != null && Session["Role"].ToString() == "Admin")
                {
                    <li class="nav-item">
                        <a class="nav-link @(currentController == "Home" && currentAction == "Index" ? "active" : "")"
                           href="@Url.Action("Product","Admin")">
                            <i class="bi bi-shop-window"></i> Admin Dashboard
                        </a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link @(currentController == "Home" && currentAction == "Index" ? "active" : "")"
                       href="@Url.Action("Index", "Home")">
                        <i class="bi bi-house-door"></i> Home
                    </a>
                </li>

                <!-- Categories Dropdown -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="categoriesDropdown" role="button" data-bs-toggle="dropdown">
                        <i class="bi bi-list"></i> Categories
                    </a>
                    <ul class="dropdown-menu scrollable-menu" id="categoriesList">
                        <!-- Categories will be loaded dynamically here -->
                    </ul>
                </li>


                <li class="nav-item">
                    <a class="nav-link @(currentController == "Account" && currentAction == "Orders" ? "active" : "")"
                       href="@Url.Action("MyOrders", "Home")">
                        <i class="bi bi-box-seam"></i> My Orders
                    </a>
                </li>

                <li class="nav-item">
                    <a class="nav-link @(currentController == "Shopping" && currentAction == "Cart" ? "active" : "")"
                       href="@Url.Action("Cart", "Home")">
                        <i class="bi bi-cart"></i>
                        <span class="badge bg-danger cart-count">0</span>
                    </a>
                </li>


                <li class="nav-item">
                    <a class="nav-link @(currentController == "Shopping" && currentAction == "Wishlist" ? "active" : "")"
                       href="@Url.Action("Wishlist", "Home")">
                        <i class="bi bi-heart"></i>
                    </a>
                </li>

                <!-- Profile Dropdown -->
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle @(currentController == "Account" && currentAction == "Profile" ? "active" : "")"
                       href="#" id="profileDropdown" role="button" data-bs-toggle="dropdown">
                        <i class="bi bi-person-circle"></i>
                        @if (Session["FirstName"] != null && Session["LastName"] != null)
                        {
                            @Session["FirstName"] @Session["LastName"]
                        }
                        else
                        {
                            <span>Profile</span>
                        }
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                        <li>
                            <a class="dropdown-item" href="@Url.Action("Profile", "Home")">
                                <i class="bi bi-pencil-square"></i> Edit Profile
                            </a>
                        </li>
                        <li>
                            <a class="dropdown-item text-danger" href="@Url.Action("Logout", "Home")">
                                <i class="bi bi-box-arrow-right"></i> Logout
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>


<style>
    .navbar {
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1000; /* Ensures navbar stays on top of other content */
        background-color: white !important;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        min-height: 85px;
        padding: 15px 0;
    }

    /* Navbar Styling */
    .navbar {
        background-color: white !important;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        min-height: 70px; /* Increased height */
        transition: background 0.3s ease-in-out;
    }

    /* Navbar brand (logo) hover effect */
    .navbar-brand {
        font-weight: 600;
        font-size: 1.9rem;
        transition: color 0.3s ease-in-out;
    }

        .navbar-brand:hover {
            color: #007bff !important;
        }

    /* Navbar links */
    .navbar .nav-link {
        color: black !important;
        font-weight: 500;
        transition: all 0.3s ease-in-out;
        padding: 10px 15px;
        border-radius: 5px;
    }

        /* Active link effect */
        .navbar .nav-link.active {
            color: #007bff !important;
            font-weight: 600;
        }

        /* Navbar links hover effect */
        .navbar .nav-link:hover {
            background-color: rgba(0, 123, 255, 0.1);
            color: #007bff !important;
            transform: translateY(-2px);
        }

        /* Icons margin */
        .navbar .nav-link i {
            margin-right: 8px;
        }

    /* Dropdown Styling */
    .navbar .dropdown-menu {
        display: none;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        min-width: 220px;
        border-radius: 8px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.15);
    }

    /* Show dropdown on hover */
    .navbar .nav-item.dropdown:hover .dropdown-menu {
        display: block;
        opacity: 1;
        visibility: visible;
    }

    /* Dropdown Items */
    .navbar .dropdown-item {
        margin-left: 10px;
        color: black !important;
        font-weight: 500;
        padding: 12px 20px;
        transition: background 0.3s ease-in-out, color 0.3s ease-in-out;
    }

        /* Dropdown Items Hover */
        .navbar .dropdown-item:hover {
            background-color: #007bff !important;
            color: white !important;
            border-radius: 5px;
        }

    /* Hover Effect on Cart, Wishlist, Orders, Profile */
    .navbar .nav-item .nav-link:hover i {
        transform: scale(1.1);
    }

    /* Login / Logout button hover effect */
    .navbar .nav-link.text-success,
    .navbar .nav-link.text-danger {
        font-weight: 600;
        border-radius: 5px;
        padding: 10px 15px;
        transition: all 0.3s ease-in-out;
    }

        /* Login hover */
        .navbar .nav-link.text-success:hover {
            background-color: #28a745;
            color: white !important;
        }

        /* Logout hover */
        .navbar .nav-link.text-danger:hover {
            background-color: #dc3545;
            color: white !important;
        }

    .cart-update {
        animation: cart-pop 0.5s ease-in-out;
    }

    @@keyframes cart-pop {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.3);
        }

        100% {
            transform: scale(1);
        }
    }
</style>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
@*<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>*@
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Function to update the cart count
    function updateCartCount() {
        $.ajax({
            url: '@Url.Action("GetCartCount", "Product")', // Ensure the controller name is correct
            type: 'GET',
            success: function (data) {
                let $cartCount = $(".cart-count");

                // If the count has changed, animate it
                if ($cartCount.text() !== data.toString()) {
                    $cartCount.text(data).addClass("cart-update");

                    setTimeout(() => {
                        $cartCount.removeClass("cart-update");
                    }, 500); // Animation duration
                }
            },
            error: function () {
                console.error("Failed to fetch cart count.");
            }
        });
    }

    // Function to add an item to the cart
    function addToCart(productId) {
        if (!productId) {
            console.error("Invalid product ID");
            return;
        }

        $.ajax({
            url: '@Url.Action("AddToCart", "Cart")',
            type: 'POST',
            data: { productId: productId },
            success: function () {
                updateCartCount(); // Refresh cart count after adding
                alert("Item added to cart!");
            },
            error: function () {
                alert("Failed to add item to cart.");
            }
        });
    }

    // Fetch cart count on page load
    $(document).ready(function () {
        updateCartCount();
    });

    // Poll for cart count updates every 5 seconds
    setInterval(updateCartCount, 5000); // Change interval if needed

    // Example usage: If you have "Add to Cart" buttons, bind click event
    $(document).on("click", ".add-to-cart-btn", function () {
        var productId = $(this).data("product-id"); // Assuming buttons have data-product-id attribute
        addToCart(productId);
    });

    // Function to fetch categories
    function fetchCategories() {
        $.ajax({
            url: '@Url.Action("FetchCategories", "Product")', // Ensure controller matches
            type: 'GET',
            success: function (categories) {
                let categoryList = $("#categoriesList");
                categoryList.empty(); // Clear existing items

                $.each(categories, function (index, category) {
                    let categoryItem = `<li><a class="dropdown-item" href="/Product/Category?category=${category.Name}">${category.Name}</a></li>`;
                    categoryList.append(categoryItem);
                });
            },
            error: function () {
                console.error("Failed to fetch categories.");
            }
        });
    }

    $(document).ready(function () {
        fetchCategories(); // Fetch categories on page load
    });
</script>

